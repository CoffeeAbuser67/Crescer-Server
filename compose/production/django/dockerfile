# HERE
FROM python:3.12.4-slim as python-base

# - PYTHONUNBUFFERED: Ensures Python doesn't buffer the output, allowing for real-time log display.
# - PYTHONDONTWRITEBYTECODE: Prevents Python from writing .pyc files.
# - PIP_NO_CACHE_DIR: Disables caching for pip, improving reproducibility.
# - PIP_DISABLE_PIP_VERSION_CHECK: Prevents pip from checking for updates to itself.
# - PIP_DEFAULT_TIMEOUT: Sets a default timeout value for pip operations.

ENV PYTHONUNBUFFERED=1 \    
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_NO_INTERACTION=1 \
    POETRY_HOME="/opt/poetry" \
    APP_PATH="/app/" \
    VENV_PATH="/app/.venv"

# - Add to the path variable.
ENV PATH="$VENV_PATH/bin:$POETRY_HOME/venv/bin:$PATH"

# ---------------------------------------------->
# builder stage is used to build dependencies
# ---------------------------------------------->
FROM python-base as builder

RUN set -xe \
    && apt-get update \
    && apt-get install --no-install-recommends -y \
        curl \
        libpq-dev \
        build-essential\
    && apt-get clean 

# Install Poetry - respects $POETRY_VERSION & $POETRY_HOME
ENV POETRY_VERSION=1.8.2
RUN curl -sSL https://install.python-poetry.org | python3 -

# We copy our Python requirements here to cache them
# and install only runtime deps using poetry
WORKDIR $APP_PATH
COPY ./poetry.lock ./pyproject.toml ./
RUN poetry install --no-dev --no-root 


# ---------------------------------------------->
# 'development' stage used to mount production volume under /app
# ---------------------------------------------->

FROM python-base as development

# Copying poetry and venv into image
COPY --from=builder $POETRY_HOME $POETRY_HOME
COPY --from=builder $APP_PATH $APP_PATH

# COPY --from=builder $VENV_PATH $VENV_PATH

WORKDIR /app

COPY ./core ./core

# Copying in our entrypoint
# Remove the carriage return (\r) created by Windows 
COPY ./compose/production/django/entrypoint /entrypoint
RUN sed -i 's/\r$//g' /entrypoint
RUN chmod +x /entrypoint

COPY ./compose/production/django/start /start
RUN sed -i 's/\r$//g' /start
RUN chmod +x /start

# EXPOSE 8000

ENTRYPOINT ["/entrypoint"]



